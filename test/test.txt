Accounts (from local Ganache test chain):
Admin = "0xC4D795517E9402F80d873292Ad7E776FC4770c8b" 
A = "0x7104dbe05D4FA89d1B6393DCE348583866bc5e08" 
B = "0x08b932393D442aA57153358752112d46aD1C3AcB" 
C = "0x0Cd65Cb9aA7d49A91A8c9AC2A1f22791013FBa42" 
D = "0xe16CAD940600104c09646a75F7dc4675bb37cb43" 
E = "0x0330f7bC51A6e351ca92d21D3202983fB5ee5308" 
F = "0x427dfeCfb66C00426bF1a7D1334051019a452C03" 
G = "0xEa63df4E0d2ce880fc13EC37a3284Fd5425BB5D1" 
H = "0xAa4A1F0b36bfaA66255131377642D318149f749c" 
I = "0x9886cEC70f730e8Df92CA76e4095B89AF9a86d33" 

// Check deployment
SeedChain.deployed().then(function(instance) {return instance });

// Create admin (Admin)
SeedChain.deployed().then(function(instance) {return instance.addParticipant("Admin","passAdmin",Admin,"admin", {from: Admin}) });

// Create 3 producer participants (A, B, C)
SeedChain.deployed().then(function(instance) {return instance.addParticipant("A","passA",A,"Producer") });
SeedChain.deployed().then(function(instance) {return instance.addParticipant("B","passB",B,"Producer") });
SeedChain.deployed().then(function(instance) {return instance.addParticipant("C","passC",C,"Producer") });

// Create 2 quality analysers participants (D, E)
SeedChain.deployed().then(function(instance) {return instance.addParticipant("D","passD",D,"Quality-Analyser") });
SeedChain.deployed().then(function(instance) {return instance.addParticipant("E","passE",E,"Quality-Analyser") });

// Create 2 distributors participants (F, G)
SeedChain.deployed().then(function(instance) {return instance.addParticipant("F","passF",F,"Distributor") });
SeedChain.deployed().then(function(instance) {return instance.addParticipant("G","passG",G,"Distributor") });

// Create 2 consumer participants (H, I)
SeedChain.deployed().then(function(instance) {return instance.addParticipant("H","passF",H,"Consumer") });
SeedChain.deployed().then(function(instance) {return instance.addParticipant("I","passG",I,"Consumer") });


// Get participant details
// Admin
SeedChain.deployed().then(function(instance) {return instance.getParticipant(Admin)});

// Producers
SeedChain.deployed().then(function(instance) {return instance.getParticipant(A)});
SeedChain.deployed().then(function(instance) {return instance.getParticipant(B)});

// Quality Analyser
SeedChain.deployed().then(function(instance) {return instance.getParticipant(D)});
SeedChain.deployed().then(function(instance) {return instance.getParticipant(E)});

// Supplier
SeedChain.deployed().then(function(instance) {return instance.getParticipant(F)});

// Consumer
SeedChain.deployed().then(function(instance) {return instance.getParticipant(H)});

// Create 3 products 100 (owned by A), 200 (owned by B), 300 (owned C)
SeedChain.deployed().then(function(instance) {return instance.addProduct(A, "ABC", "100", "123", 11, {from: A}) });
SeedChain.deployed().then(function(instance) {return instance.addProduct(B, "GHI", "200", "789", 13, {from: B}) });
SeedChain.deployed().then(function(instance) {return instance.addProduct(C, "MNO", "300", "357", 15, {from: C}) });

// Get product details
SeedChain.deployed().then(function(instance) {return instance.getProduct("123") });
SeedChain.deployed().then(function(instance) {return instance.getProduct("789") });
SeedChain.deployed().then(function(instance) {return instance.getProduct("357") });

// Add quality check reports
SeedChain.deployed().then(function(instance) {return instance.addQualityReport("123", "brown", "100g", "Oval singly spotted seeds", "0x74657371", D) });
SeedChain.deployed().then(function(instance) {return instance.addQualityReport("789", "green", "100g", "Starred singly spotted seeds", "0x74657373", D) });
SeedChain.deployed().then(function(instance) {return instance.addQualityReport("357", "yellow", "100g", "Sharp singly spotted seeds", "0x74657375", E) });

// Get quality check reports
SeedChain.deployed().then(function(instance) {return instance.getQualityReport("123") });
SeedChain.deployed().then(function(instance) {return instance.getQualityReport("789") });
SeedChain.deployed().then(function(instance) {return instance.getQualityReport("357") });

// Move products along supply chain: Producer=> Quality-Analyzer=> Distributor=> Distributor=> Consumer
SeedChain.deployed().then(function(instance) {return instance.newOwner(A, D, "123", {from: A}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(D, F, "123", {from: D}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(F, G, "123", {from: F}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(G, H, "123", {from: G}) });

SeedChain.deployed().then(function(instance) {return instance.newOwner(B, D, "789", {from: B}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(D, G, "789", {from: D}) });


SeedChain.deployed().then(function(instance) {return instance.getProvenance("123") });
SeedChain.deployed().then(function(instance) {return instance.getProvenance("789") });

"123" : A -> D -> F -> G -> H
"789" : B -> D -> G


//
//
//

SeedChain.deployed().then(function(instance) {return instance.newOwner(C, E, "357", {from: C}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(E, G, "357", {from: E}) });
SeedChain.deployed().then(function(instance) {return instance.newOwner(G, I, "357", {from: G}) });

SeedChain.deployed().then(function(instance) {return instance.newOwner(G, I, "789", {from: G}) });

SeedChain.deployed().then(function(instance) {return instance.getProvenance(357") });

"357" : C -> E -> G -> I

//
//
//

function addParticipant(string name, string pass, address pAdd, string pType) public returns (uint)
function getParticipant(uint p_id) public view returns (string,address,string)
function addProduct(uint own_id, string modelNumber, string partNumber, string serialNumber, uint productCost) public returns (uint)
function getProduct(uint prod_id) public view returns (string,string,string,uint,address,uint)

function newOwner(uint user1_id ,uint user2_id, uint prod_id) onlyOwner(prod_id) public returns(bool)
/* function getProductRegistrationHistory(uint prod_id)  public  returns (registration[]) */
function getOwnership(uint reg_id)  public view returns (uint,uint,address,uint)
/* function getRegistraionList(uint prod_id) public returns (uint) */
function authenticateParticipant(uint uid ,string uname ,string pass ,string utype) public view returns (bool)


